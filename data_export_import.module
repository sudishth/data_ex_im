<?php
/**
 * @file
 * This module can export and import datasets.
 *
 * It will have several clearly defined sections and will be
 * extended by  plugins or include files.
 *
 * The sections are:
 * Help
 * Permissions
 * hook_menu
 * calbacks
 * forms
 * submit
 * validation
 */

// Each dataset export/import profile is provided by including a
// profile file which provides all the functions required.
module_load_include('inc', 'data_export_import', 'includes/profiles/taxonomy_terms');
module_load_include('inc', 'data_export_import', 'includes/profiles/all_content_types');

/**
 * Implements hook_help().
 */
function data_export_import_help($path, $arg) {

  $output = '';

  switch ($path) {
    case "admin/help#data_export_import":
      $output = '<p>' . t("Exports datasets as files which can then imported into other Drupal instances.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_perm().
 */
function data_export_import_perm() {
  return array('access data export import');
}

/**
 * Implements hook_menu().
 */
function data_export_import_menu() {

  $items = array();

  $items['admin/content/data_export_import'] = array(
    'title' => 'Data export import',
    'page callback' => 'data_export_import_callback_overview',
    'access arguments' => array('access data export import'),
    'description' => 'Data export import',
    'type' => MENU_NORMAL_ITEM,
  );

  // This 'tab' inherits from MENU_NORMAL_ITEM
  $items['admin/content/data_export_import/overview'] = array(
    'title' => 'Overview',
    'weight' => 0,
    'description' => 'Data export import introduction',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Here we need to loop through the profile files and add in items as
  // required.  This would be from a function
  // data_export_import_profile_add_items_to_main_form(&$items)
  // sort of array.  First of all the taxonomy terms.
  $items['admin/content/data_export_import/taxonomy_terms'] = array(
    'title' => 'Taxonomy Terms',
    'page callback' => 'data_export_import_callback_export_taxonomy_terms',
    'access arguments' => array('access data export import'),
    'weight' => 1,
    'description' => 'Export Taxonomy Terms',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/content/data_export_import/taxonomy_terms/export'] = array(
    'title' => 'Export',
    'page callback' => 'data_export_import_callback_export_taxonomy_terms',
    'access arguments' => array('access data export import'),
    'weight' => 2,
    'description' => 'Export Taxonomy Terms',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/content/data_export_import/taxonomy_terms/import'] = array(
    'title' => 'Import',
    'page callback' => 'data_export_import_callback_import_taxonomy_terms',
    'access arguments' => array('access data export import'),
    'weight' => 3,
    'description' => 'Import Taxonomy Terms',
    'type' => MENU_LOCAL_TASK,
  );

  // Tabs for all_content_types
  $items['admin/content/data_export_import/all_content_types'] = array(
    'title' => 'Content types',
    'page callback' => 'data_export_import_callback_export_all_content_types',
    'access arguments' => array('access data export import'),
    'weight' => 21,
    'description' => 'Export All Content Types',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/content/data_export_import/all_content_types/export'] = array(
    'title' => 'Export',
    'page callback' => 'data_export_import_callback_export_all_content_types',
    'access arguments' => array('access data export import'),
    'weight' => 22,
    'description' => 'Export All Content Types',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/content/data_export_import/all_content_types/import'] = array(
    'title' => 'Import',
    'page callback' => 'data_export_import_callback_import_all_content_types',
    'access arguments' => array('access data export import'),
    'weight' => 23,
    'description' => 'Import Taxonomy Terms',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Callback function for the overview tab.
 *
 * @return string
 *   Form to enable the user to select datasets for exporting.
 */
function data_export_import_callback_overview() {

  // This form calls the form builder function via the
  // drupal_get_form() function which takes the name of this form
  // builder function as an argument. It returns the results to
  // display the form.
  return "Data Export Import overview";

}

/**
 * Callback function to export taxonomy terms.
 */
function data_export_import_callback_export_taxonomy_terms() {

  return drupal_get_form('data_export_import_export_taxonomy_terms_form');
}

/**
 * Callback function to import taxonomy terms.
 */
function data_export_import_callback_import_taxonomy_terms() {

  return drupal_get_form('data_export_import_import_taxonomy_terms_form');
}

/**
 * Callback function to export all content types.
 */
function data_export_import_callback_export_all_content_types() {

  return drupal_get_form('data_export_import_export_all_content_types_form');
}

/**
 * Callback function to import all content types.
 */
function data_export_import_callback_import_all_content_types() {

  return drupal_get_form('data_export_import_import_all_content_types_form');
}

/**
 * Function to create form to export taxonomy terms.
 */
function data_export_import_export_taxonomy_terms_form($form_state) {

  $form = array();

  // This stops the values being posted from being flattened into a
  // single level array.  It might be easier to extract the
  // information from a non-flattened array.
  $form['#tree'] = TRUE;

  data_export_import_taxonomy_terms_add_fieldset_to_export_form($form);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create dataset files'),
  );

  return $form;
}

/**
 * Function to create form to import taxonomy terms.
 */
function data_export_import_import_taxonomy_terms_form($form_state) {

  $form = array();

  $form['taxonomy_terms'] = array(
    '#type' => 'fieldset',
    '#title' => t('Taxonomy terms'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  // Get the contents of the dataset directory and create a list of
  // links to dataset files.
  $directory = file_directory_path() . "/data_export_import/taxonomy_terms";
  $mask = '.dataset';
  $files = file_scan_directory($directory, $mask);

  // Sort them by the filename which is used as the key.  Since the
  // files are named using datetime stamps they will be listed in
  // date/time order.
  ksort($files);

  $options = array();
  $options['none'] = "None";
  foreach ($files as $file) {

    $options[$file->basename] = check_plain($file->basename);
  }

  $form['taxonomy_terms']['taxonomy_terms'] = array(
    '#type' => 'radios',
    '#title' => t('Please select file to import'),
    '#default_value' => 'none',
    '#options' => $options,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Import dataset files',
  );

  return $form;
}

/**
 * Function to create form to export all content types.
 */
function data_export_import_export_all_content_types_form($form_state) {

  $form = array();

  // This stops the values being posted from being flattened into a
  // single level array.  It might be easier to extract the
  // information from a non-flattened array.
  $form['#tree'] = TRUE;

  data_export_import_all_content_types_add_fieldset_to_export_form($form);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create dataset files'),
  );

  return $form;
}

/**
 * Function to create form to import all content types.
 */
function data_export_import_import_all_content_types_form($form_state) {

  $form = array();

  $form['all_content_types'] = array(
    '#type' => 'fieldset',
    '#title' => t('All Content Types'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  // Get the contents of the dataset directory and create a list of
  // links to dataset files.
  $directory = file_directory_path() . "/data_export_import/all_content_types";

  $mask = '.dataset';
  $files = file_scan_directory($directory, $mask);

  // Sort them by the filename which is used as the key.  Since the
  // files are named using datetime stamps they will be listed in
  // date/time order.
  ksort($files);

  $options = array();
  $options['none'] = "None";
  foreach ($files as $file) {

    $options[$file->basename] = check_plain($file->basename);
  }

  $form['all_content_types']['all_content_types'] = array(
    '#type' => 'radios',
    '#title' => t('Please select file to import'),
    '#default_value' => 'none',
    '#options' => $options,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Import dataset files',
  );

  return $form;
}

/**
 * Function to process form to export taxonomy terms.
 */
function data_export_import_export_taxonomy_terms_form_submit($form, &$form_state) {

  // This module has not yet been extended to correctly handle data
  // which has internationalization (i18n) enabled.
  if (module_exists('i18n')) {

    drupal_set_message(t("The data export functionality is not currently compatible with internationalization (i18n)."), 'error');
    return TRUE;
  }

  data_export_import_taxonomy_terms_export_to_file($form_state, $dataset_files_created);

  drupal_set_message("The following dataset files were created:");

  foreach ($dataset_files_created as $dataset_file_name) {
    drupal_set_message($dataset_file_name);
  }

  return TRUE;
}

/**
 * Function to process form to import taxonomy terms.
 */
function data_export_import_import_taxonomy_terms_form_submit($form, &$form_state) {

  // This module has not yet been extended to correctly handle data
  // which has internationalization (i18n) enabled.
  if (module_exists('i18n')) {

    drupal_set_message(t("The data export functionality is not currently compatible with internationalization (i18n)."), 'error');
    return TRUE;
  }

  if ($form_state['values']['taxonomy_terms'] != 'none') {

    $result = data_export_import_import_taxonomy_terms($form_state['clicked_button']['#post']['taxonomy_terms']);
    drupal_set_message(t('The Taxonomy Terms dataset file %dataset_file was imported.', array('%dataset_file' => $form_state['clicked_button']['#post']['taxonomy_terms'])));
  }
}

/**
 * Function to process form to export all content types.
 */
function data_export_import_export_all_content_types_form_submit($form, &$form_state) {

  // This module has not yet been extended to correctly handle data
  // which has internationalization (i18n) enabled.
  if (module_exists('i18n')) {

    drupal_set_message(t("The data export functionality is not currently compatible with internationalization (i18n)."), 'error');
    return TRUE;
  }

  data_export_import_all_content_types_export_to_file($form_state, $dataset_files_created);

  drupal_set_message("The following dataset files were created:");

  foreach ($dataset_files_created as $dataset_file_name) {
    drupal_set_message($dataset_file_name);
  }

  return TRUE;
}

/**
 * Function to process form to import all content types.
 */
function data_export_import_import_all_content_types_form_submit($form, &$form_state) {

  // This module has not yet been extended to correctly handle data
  // which has internationalization (i18n) enabled.
  if (module_exists('i18n')) {

    drupal_set_message(t("The data export functionality is not currently compatible with internationalization (i18n)."), 'error');
    return TRUE;
  }

  if ($form_state['values']['all_content_types'] != 'none') {

    $result = data_export_import_import_all_content_types($form_state['clicked_button']['#post']['all_content_types']);
    drupal_set_message(t('The All Content Types dataset file %dataset_file was imported.', array('%dataset_file' => $form_state['clicked_button']['#post']['all_content_types'])));
  }
}
